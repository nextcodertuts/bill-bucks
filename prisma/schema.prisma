generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  avatarUrl       String?
  phoneNumber     String            @unique
  hashedPassword  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  subscribe       Boolean           @default(false)
  balance         Decimal           @default(0) @db.Decimal(10, 2)
  referralCode    String            @unique @default(cuid())
  referredBy      String?
  sessions        Session[]
  invoices        Invoice[]
  referralHistory ReferralHistory[]
  withdrawals     Withdrawal[] // New relation
}

model PushToken {
  id         String   @id @default(cuid())
  token      String   @unique
  platform   String?
  deviceInfo Json?
  lastUsed   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("push_tokens")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Merchant {
  id        String    @id @default(cuid())
  name      String
  address   String
  phone     String
  city      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Invoice {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Decimal(10, 2)
  imageUrl   String
  status     String   @default("PENDING")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  merchantId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([merchantId])
  @@index([status])
  @@index([createdAt])
}

model ReferralHistory {
  id             String   @id @default(cuid())
  userId         String
  referredUserId String
  amount         Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// New model for withdrawals
model Withdrawal {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  upiId     String
  status    String   @default("PENDING") // PENDING, COMPLETED, CANCELLED
  notes     String? // For admin notes or rejection reasons
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}
